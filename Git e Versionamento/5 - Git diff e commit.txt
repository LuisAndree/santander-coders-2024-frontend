Comando git diff: 

O comando git diff é usado para mostrar as diferenças entre commits, o índice (staging area), 
e a árvore de trabalho (working tree) no Git. Ele permite que você veja quais mudanças foram 
feitas antes de commitá-las, ajudando a revisar e compreender as alterações realizadas no código.

git diff [opções] [<commit>] [<caminho>]

1 - git diff  				-> Ver Diferenças Não Estagiadas (Unstaged)			Ex: git diff
2 - git diff --cached 			-> Ver Diferenças Estagiadas (Staged)				Ex: git diff --cached
3 - git diff <commit1> <commit2> 	-> Ver Diferenças Entre Commits					Ex: git diff abc123 def456
4 - git diff <commit> 			-> Ver Diferenças de um Commit com a Árvore de Trabalho 	Ex: git diff def456	
5 - git diff <arquivo> 			-> Ver Diferenças em um Arquivo Específico			Ex: git diff meu-arquivo.txt
6 - git diff --cached <arquivo> 	-> Ver Diferenças em um Arquivo Específico Estagiado		Ex: git diff --cached meu-arquivo.txt

Analisando a Saída do git diff
A saída do git diff geralmente inclui:

1 - Contexto: Algumas linhas de contexto para mostrar onde as mudanças ocorrem no arquivo.

2 - Linhas Removidas: Linhas que foram removidas são prefixadas com um -.

3 - Linhas Adicionadas: Linhas que foram adicionadas são prefixadas com um +.

Ex:
diff --git a/meu-arquivo.txt b/meu-arquivo.txt
index e69de29..d95f3ad 100644
--- a/meu-arquivo.txt
+++ b/meu-arquivo.txt
@@ -0,0 +1,3 @@
+Linha adicionada 1
+Linha adicionada 2
+Linha adicionada 3

--- a/meu-arquivo.txt: Indica a versão anterior do arquivo.
+++ b/meu-arquivo.txt: Indica a nova versão do arquivo.
+Linha adicionada 1: Linha que foi adicionada.

Comando git commit:

O comando git commit é usado para criar um novo commit no repositório Git. Ele captura um instantâneo 
(snapshot) das mudanças no índice (staging area) e registra essas mudanças permanentemente no histórico 
do repositório.

git commit [-m "mensagem"] [-a]

1 - git commit -m "Corrige bug no login" 		-> -m "mensagem": Permite que você adicione uma mensagem de commit diretamente na linha de comando.

2 - git commit -am "Adiciona funcionalidade de login" 	-> -a: Adiciona automaticamente todos os arquivos modificados e rastreados ao índice antes de fazer o commit.

Boas Práticas para Mensagens de Commit:

1 - Seja descritivo e conciso.
2 - Comece com uma letra maiúscula.
3 - Limite a linha de mensagem a cerca de 50 caracteres.
4 - Use o imperativo (por exemplo, "Corrige", "Adiciona", "Atualiza") para descrever o que o commit faz.

 
